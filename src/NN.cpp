#include "NN.h"

namespace RL_PLANNER_NS
{


NN::NN()
{
    std::cout << "NN 创建 in MCTS \n";
    // 逗号初始化
    w1 << -3.3857255330861257825, 2.7243239533202778802, -5.4445988333090813427, 1.1242206864050134918, 4.2970875919462265813,
        -1.7875667522001135179, -6.1907549390380438581, 2.793036919071687052, 6.7696131822845782011, -11.592023337576641495,
        -1.6689843523293090843, -4.837360843411442346, 0.090256166412462313087, 1.0017717366674072643, 1.4705141927692575443,
        9.145944900702344782, -5.4181905083544723567, 4.4420802202953151294, -5.8591225171957406204, -3.8961302949080196534,
        -0.48646822724513022473, 1.1497794553457834077, -4.4416756819978031601, 5.2186950673844982873, -2.5357292506845139357,
        3.8466950093858667259, -4.0903501140426845595, 1.5778426571164920755, -5.4304119561594639265, -3.9044929068070248768,
        3.6832061509431737178, 1.6888197351443658967, -2.5698022325098706098, -3.4685938953673960405, 6.0410451001496943135,
        2.1764420382072779958, -10.408693879664102866, 5.67886963126900568, -2.1394668385563022639, 13.350700163366369111,
        -5.5779570628652397346, 6.6647414753597402637, -4.8015780724380503486, 0.32807144722891556921, -1.8137703199348633731,
        -7.9811268736745093477, 1.6862561008945109453, 0.25466101544143665558, -1.8388632850626858151, -3.4745188981687453733,
        -10.82513438893322899, -1.6583189412373275928, -1.2865872048289017648, 1.3105197911165313851, -2.2430745646633818424,
        6.8739057049665133192, 2.6658918068896308995, 1.9682400804544015749, 3.5785678860884631014, 1.3345618638920031529,
        -6.7641409582798663891, -0.74011571664803721404, -6.7855229100985434698, -2.4057948465345648792, 2.6336474363437623047,
        -8.278410720159673275, 6.3717203094392331764, -8.0401370931247093665, -3.3434295602319141771, 0.86912193491774925036,
        -0.25427277950948995455, -5.8784379292490553937, -1.420648762276557564, -12.673427844239421702, -2.0951676584420892979;
    b1 << -4.7150640891088126949, 12.076376978442151966, 6.0656615623462482034, -5.9356244319768549644, -0.60651545071526413722, -1.0008026548680193368, 0.43085537396275125355, 6.161209076939266005, 0.29806300905610183527, -4.1346208944347022651, -8.3791012587936659628, 6.1984746142735582808, 3.8444949959525578365, -7.2156237095539426107, 5.3319092584171228211;
    w2 << -10.350137271379866277, 18.66940428779132688, -8.4446092559151075818, -6.6190026633118712596, 0.84740745312453047422, -25.600192950561456939, -15.639376638943408793, -12.115597649654407775, 0.34346878878255193701, -13.674009206687557594, 6.0059414009081750763, -16.524892827394371153, -6.6675440939353300962, -3.2496353006551923492, -8.2032549468764628386, 16.356866564463746982, 4.2850288356641303977, -5.0803443985314897802, 6.4272536215507560797, -8.4199924965333803328, 3.6160532293623512956, 5.3527753783225815454, -5.1653378100311977406, 7.4916224692319950407, -17.50835009777725304, 8.6259775643331000339, -2.8921365883633765037, -8.625244238330848745, 7.7133269886516062641, -3.0099395538169919639, -7.6096555921842261583, 14.32144499013090666, -14.596423859119829203, -4.0628980495778126425, 4.7769941169530154568, -0.33326276709681146304, 21.375392837892196241, 0.094278376208736025532, 7.3134746962810170956, -10.025664630776066844, -4.4331291468772073827, -1.3024194376359374825, -0.69052296474931740278, 1.3482322321252087072, 3.4816130508457674431, -13.209807473238434739, 6.7935642963943374539, -2.1748776744123587967, 8.4461559680286164564, -13.62587985533303403, 8.6875933692246469775, -5.3451465045605930371, 32.608322345254606489, -17.217161271677021261, -10.265724356335713452, 2.2647157101382586752, -11.078346244605111082, -14.319857568444499307, 3.293085356261542973, 17.581234848722655073, 14.078423091584467031, 3.340667727248810781, -9.2551329623809532876, 1.5295501707353686971, 16.632384310325679877, 2.9655329307157751728, -16.04409637773377284, -0.41751492984587329493, -8.62886217914105913, 15.10067192725234797, 3.0368451448483635424, -26.105863385293183399, 2.0352148652332195944, -24.675774480348469098, 15.119499930133990517, -0.85969403036812430674, 6.1757531399724987509, 1.3130342767410265736, 19.522282135984283968, -7.159793597484631178, -11.669724992100251271, -21.17633094526498283, -2.2626131078509614802, -25.81276574737313112, 7.9723932776599628625, 8.3204154070161262524, -11.881448785703989657, 1.2289855996237226687, 8.4592238927708223173, -1.4067426038475683292, 2.1044591886431698313, -0.61561130132828378869, 12.035949718829609623, 7.4313390024647825172, 4.7949497715877891224, -3.6462747012476075525, 0.28547076649899183476, -0.026231030280269913846, -14.650494742884077937, -11.722812164600052043, -5.3935755813624854937, -12.425175076834673149, 0.090991791496228019431, -16.164510048516003593, -7.0957401952092764574, 17.616042297392844773, 16.466113588094152931, -10.658548495847945503, -18.363584687769776593, 3.4012332048943814122, 22.523539791001653043, -8.7659762077381753187, -8.3602006770413588299, 13.35003544530707309, -18.742243453416858046, 13.483469861094411257, -4.0169793907380730857, 3.3444936159425227018, -22.832678533670918597, -4.5557245275480111601, 2.4246604474424096054, 16.9864765580762338, 3.5303478556529506172, 3.8129586411471163565, -18.180627865493633522, -6.6331097827410827605, -20.106662609020890642, -20.696561715362111755, 8.3085978442403600752, -21.496095634993729107, -5.1545689758032251504, 4.034891564896993188, -7.2850449157641419262, 4.6421273618223946045, 3.2693402458573128655, 13.748403908994562883, -13.8006084118064134, -6.610162304979461112, 0.44248269417762747802, 13.387263927999955015, 10.742889751157632006, -18.733457954818195645, 15.439647889360678334, -22.841146490986151463, 7.8658993495843834154, -24.547313095538811467, -5.598804747300610174, -15.091884520717234963, -22.477243211203909112, 4.6310564236289879503, 5.4910783649947658702, 7.7023001613905082152, -1.3011822152238017303, 19.272361657071609642, -1.4339266658280453992, 7.8998938380064336329, 14.137530562486125163, -12.960557865433244729, -28.314001869095839936, -5.4493174500751369038, -7.1558742121857683571, 8.7694083875934385475, -16.989558333705058857, -1.2325267333376146439, 2.4063301505463874363, -14.303196152472196445, -1.3106140423099859049, -5.4730283334553773145, -20.565949343289080531, 14.838186564102574749, 20.636885773791714627, 11.724682907677189903, 1.6535300556500809321, 20.608685434558761784, 23.323254604866885842, 2.474515003640924693, -15.051212067072450296, -8.5418443479224883674, 32.530684274715760296, 5.8810846160229894863, -1.9011403207382044922, -0.37533110991597767869, 22.989038724361758881, 0.17210740456614004312, 22.267402551471228378, 0.095397007441526654459, 6.3801075959902266987, -13.729950284039194486, -1.3307808901460225215, 3.5369484930595156413, -13.823219348162766096, -1.0590396741691929794, 7.5050999684900840947, -0.47829588257625865744, -13.506967748209266489, 6.7305702373445912556, 9.348494339334280312, -1.4316211388710282648, 12.193417293913453747, -2.2213921609329445594, 9.1207142669048426598, 1.4561194395412633273, 2.7340258484587773857, -9.1636132749464209724, 12.874623104848197386, 19.40716908832660792, 27.667887996887312596, 2.3328569087029640272, -1.4658772020566357419, 2.8613198692870369655, 6.8231469160318152234, 4.1765371320976987235, 7.4109158834161625862, -4.5910349125668927783, -3.101756822333838759, -2.6747075788584968592, 10.054320763163479668, -13.340052334672535039, 8.0663159570454485703, -6.3273225678497366786, 1.378566785211555068, 2.0494522910629706658, 15.294108793549307634, -10.870251571424137893, -3.2426189293265617053;
    b2 << 22.586995487374394997, -10.017091814200895783, 16.162635998129410098, 7.7984126538567206666, 10.994461683611648439, -0.03206207309616183887, -13.445905306396989332, 5.3765901235609643294, -2.9325091235354476815, 17.963597033458079011, 5.6634236691058417179, -10.708768500037280091, -10.076345358824847054, 13.312014386925463683, -13.358447686194008242;
    w3 << 0.18728083757436200796, 3.0464847584406897774, 2.2633878807927581001, 4.6847897045832986862, -4.0308700388312344032, 4.9794290329211250423, 2.086271517882605675, 0.45163002740720947781, 4.2385164748581498628, 3.3035870122376556068, -0.16575930430439284047, 0.36463333300533701253, 3.456406681666452041, -0.79822151604781876877, 0.90346744079248042514, 1.2213400091738582098, -4.778774150397770093, -0.14572456720803317332, -2.2407398552904047584, -4.464331947086320973, -6.9709913504690517172, 2.8688861341503542057, -1.0766671438059132182, -2.3407090253785365341, -3.8633137281498548532, -8.7769274842430373695, 1.5255542219768596368, -1.5592695170405208582, 5.619678910687163409, -2.7147163049829492465, -1.167884058637465694, 2.5129621930967034338, -0.26018161252541643913, -3.6490947469736254583, -2.6020068578657449265, -4.0026130848084031655, 0.60778693233587133271, -0.15487465016343610058, -4.127517784510761345, -5.5336370055359633824, -2.9195520435718740337, -1.1766033737160517259, 0.17718414155681774802, 6.6977258245442916618, -3.4383340995388493866, 0.51996308211372610497, -0.60290918649416169739, -3.1751567449235738039, 4.4076242618350862656, -3.1105431729847401456, -2.2775750762091440116, -2.6863152524495927942, -4.7473310881053931709, -1.6880310084683547434, -0.18579605709477664544, 1.7133785989557956952, -3.0466868443686681012, -2.0428887333252032654, 1.0126849631698024989, 4.1533971935149374133, 1.0835989678081376919, 0.47719008114301902923, 2.5077329084884993904, 3.3503328051286667133, -0.084399411896476692063, -5.2708850413375616384, -2.8307188228340409708, -0.17829723422150220435, -0.35891220956708314027, 2.4546621336550571435, 0.92736769979502309269, 1.3957637611122553079, -3.4709220373502653878, -3.7280212653205704321, 14.80786440637384338, 0.82368691371179603156, 5.3838764144092303709, -0.94157319100804270917, -5.4718619332319038406, 2.022400659295179981, 6.1011170637414586793, 3.168728352290120398, 4.6604062282322864519, 4.0626531158213756711, 4.2631629430901663014, 2.0698186092733199537, 3.0196934746846095798, 1.1053162937680860445, -4.5279468704821308478, -1.8846721776776025337, -2.4965265232076050417, -0.96622612359238801982, 0.46053618250350708552, 6.3298760056955858389, -1.2383908441424720248, 0.064015962147091196033, 6.5257972014370135838, -6.964099916494068232, 0.80803946414793015318, 2.0051391291396836181, 1.9308336552202118863, -4.9635870646802784378, 6.2867759947405197352, 5.337592240204488192, 3.2476072903969348538, -0.95383252614274949277, -1.5047136247587831193, 2.1568054715903079988, -6.3890959668853808395, 4.8798885006852552593, -5.974288596755156, 1.2517584960582628373, -2.7406801862228773459, -1.6476906012655214706, -2.7496661561661954742, 1.7284867988429974961, -2.3969077819989133005, -2.0853471570916974898, 1.4659103333774778921, -8.3612109837128638645, 0.76323752026125479819, -1.3335639973547075421, -3.6400311829454610191, 1.5033400179348237469, 0.80631076994418271475, -2.9790884135292370338, -1.7814072251317625284, -4.5363253228598701128, -0.47978105365341849886, 1.0146356137149306065, 3.5165881457060117476, -1.7766245461487737423, -1.1575297450821226963, -1.2024443455885305276, 2.146320863251971911, -0.17007083916714432759, -3.959302060800061529, -1.6627846665898633471, 5.7968197887309553806, -3.1255493846174333683, 2.7031172654798418797, -2.7007552928396969527, -2.2175137301682950053, 2.0245617385742651351, 3.1578840141356532278, 2.8625195058585655161, -2.2005470189191305153, -1.0075690563410528711, -0.82744229609393293856, 5.0745385166515779574, 5.3885767432235711638, -1.9669213621122147995, 5.2109564599947528762, -6.373153957573959083, 2.4296627294468589042, 4.4371714741893635292, 4.4755787977821412937, 9.1539285418975406827, -0.69017960602689520933, -1.945511650356218869, -3.2301059798048714633, 3.8106270005934126388, -2.4207186868063423901, 2.0354284895278689227, -5.0051029674843814377, -1.796245345555342654, 4.5608170456524295133, 4.6222730813428523078, -0.92861965813322744356, 2.7704492344184812325, 9.1418170934486084889, -1.6065276757759816562, 6.2883600240230865808, 1.434422434114689171, 0.8204809234381191807, 1.8135898104660119756, 0.57174101097359519841, 1.9673731076296101516, -1.676044313585322465, 0.75184099576517138264, -0.003300042088127248547, 2.2137646040694010097, -2.2975496249249953706, -7.9664655197957880972, 5.6836129527861904975, 1.0619446594116539462, 0.45680022811578102626, -0.22300186217004067113, -2.6383353139077878602, -2.9304320974196369498, 1.7332366965861043528, 0.64473548123036683588, -1.6427773704308050728, -2.4023315622909775513, -2.8357479295534226971, -0.54644852056283388375, 3.4777550445509595178, -2.8639915663057693429, -0.79497856176345160772, -2.4551443401914680997, -3.2736792167041253165, -2.9483724803411917037, 3.8236347052780663702, -4.3878788958179315571, -2.2532359413533114001, -0.39946182400455304551, 1.9196440785457864475, 4.5610519812999665845, 0.3525727258595924285, -8.1234888999492280703, -1.2241571964676738471, -6.6537360368770483987, -3.5051269681287506863, 4.0220638276388056553, 0.89407191617215453494, 2.4671137802473372957, -4.168188588900984648, -1.3954539298184318596, 2.0514735272911868158, 2.5116902574052897279, -3.8326624293076720917, 1.7503673870579807836, -0.31178646432184259352, -5.552622466577810556, -0.075127142584551373505;
    b3 << 5.1917195894781453802, -8.4246893062938763563, 1.2542509579069027748, 4.6357055098799158088, -15.977853401040309933, 6.9473511351176249207, 2.7537598730859840224, 3.7964755171354522822, 6.3596766439583731767, 1.5273670037743594108, -13.491171200172974665, 1.4117655453761273066, 7.0863824206054211174, -0.87742092375028657436, -5.4325820584735486918;
    xoffset << -3.96470605328932, -1.02057680716084, -0.000991183734182169, -530, -1;
    gain << 0.267927495834709, 0.611512828276633, 2.49083507979787, 0.00188679245283019, 1.37457044673539;
    ymin = MatrixXd::Ones(5, 1) * -1;
}

NN::~NN()
{
}

void NN::mapminmax_apply(Matrix<double,5,1> &inputData)
{
    // minus  times  plus
    for (size_t i = 0; i < inputData.size(); i++)
    {
        inputData[i] = (inputData[i] - xoffset(i,0)) * gain(i,0) + ymin(i,0); // 
    }
}

void NN::tansig_apply( Matrix<double, 15, 1> &inputData )
{
    for (size_t i = 0; i < inputData.size(); i++)
    {
        inputData(i,0) = 2 / (1 + exp(inputData(i,0) * -2)) - 1;
    }
}
void NN::softmax_apply(Matrix<double, 15, 1> &inputData)
{
    // 防止溢出  先减去最大值
    double max_prob = inputData.maxCoeff();
    inputData = inputData - Eigen::MatrixXd::Ones(inputData.rows(), inputData.cols()) * max_prob; // 矩阵减
    // 求和
    double sum_exp = 0.0;
    for (size_t i = 0; i < inputData.size(); i++)
    {
        inputData(i, 0) = exp(inputData(i, 0));
        sum_exp += inputData(i, 0);
    }
    // 相除
    for (size_t i = 0; i < inputData.size(); i++)
    {
        inputData(i, 0) /= sum_exp;
    }
}

void NN::forward_func( Matrix<double,5,1> inputData, Matrix<double, 15, 1> &outputData) // 输入直接拷贝  输出不拷贝
{
    mapminmax_apply(inputData);
    outputData = b1 + w1 * inputData;
    // for (size_t i = 0; i < outputData.size(); i++)
    //     {
    //         std::cout << outputData[i] << std::endl;
    //     }
     
    tansig_apply(outputData);
    outputData = b2 + w2 * outputData;
    tansig_apply(outputData);
    outputData = b3 + w3 * outputData;
    softmax_apply(outputData); /// outputData就是输出的概率了
}
void NN::forward_func(Matrix<double,5,1> inputData)
{
    mapminmax_apply(inputData);
    probs = b1 + w1 * inputData;
    
    // for (size_t i = 0; i < outputData.size(); i++)
    //     {
    //         std::cout << outputData[i] << std::endl;
    //     }
    tansig_apply(probs);
    probs = b2 + w2 * probs;
    tansig_apply(probs);
    probs = b3 + w3 * probs;
    softmax_apply(probs); /// outputData就是输出的概率了
}; // 前向计算 结果放在probs 成员中

int NN::get_max_prob_rule(Matrix<double, 15, 1> &inputProb)
{
    // 产生随机数
    srand(time(0));
    double r = rand() * 1.0 / RAND_MAX;// RAND() 返回的是整数
    double s = 0.0;
    // 计算累加和 不必算出来存储，遍历一次即可
    for (size_t i = 0; i < inputProb.size(); i++)
    {
        s += inputProb[i];
        if(s>=r)
        {  // 直接return
            return i + 1; // 注意加1 
        }
    }
    // 最后发现没有
    return inputProb.size();
    // 找到第一个大于该随机数的索引并返回
}

int  NN::get_max_prob_rule()
{
    // 产生随机数
    srand(time(0));
    double r = rand() * 1.0 / RAND_MAX;// RAND() 返回的是整数
    double s = 0.0;
    // 计算累加和 不必算出来存储，遍历一次即可
    for (size_t i = 0; i < probs.size(); i++)
    {
        s += probs[i];
        if(s>=r)
        {  // 直接return
            return i + 1; // 注意加1 
        }
    }
    // 最后发现没有
    return probs.size();
}

int  NN::get_max_prob_norule()
{
    double maxProb = probs[0];
    int ind = 0;
    for (size_t i = 0; i < probs.size(); i++)
    {
      if(probs[i] > maxProb )
      {
          maxProb = probs[i];
          ind = i;
      }
    }
    // 最后发现没有
    return ind;
}

    } // END OF ns